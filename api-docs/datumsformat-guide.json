{
  "titel": "Datumsformat-Konvertierung für deutschen Chatbot",
  "problem": "Deutschland nutzt DD.MM.YYYY, API erwartet YYYY-MM-DD (ISO 8601)",
  "lösung": "Konvertierung zwischen Formaten mit Helper-Funktionen",
  
  "wichtigste_regel": {
    "an_api_senden": "YYYY-MM-DD (ISO 8601)",
    "in_ui_anzeigen": "DD.MM.YYYY (deutsches Format)",
    "beispiel": {
      "user_input": "15.02.2025",
      "nach_konvertierung": "2025-02-15",
      "an_api": "2025-02-15",
      "von_api": "2025-02-15",
      "nach_konvertierung_ui": "15.02.2025",
      "in_ui_anzeigen": "15.02.2025"
    }
  },
  
  "helper_funktionen": {
    "formatDateGerman": {
      "zweck": "ISO → Deutsch",
      "input": "2025-02-15",
      "output": "15.02.2025",
      "verwendung": "Für Anzeige in UI nach API-Response"
    },
    "formatDateISO": {
      "zweck": "Deutsch → ISO",
      "input": "15.02.2025",
      "output": "2025-02-15",
      "verwendung": "Vor API-Call zum Konvertieren"
    },
    "getCurrentDateGerman": {
      "zweck": "Aktuelles Datum im deutschen Format",
      "output": "15.02.2025",
      "verwendung": "Für Min-Datum in Date-Pickern"
    },
    "validateGermanDate": {
      "zweck": "Validiert deutsches Datumsformat",
      "input": "15.02.2025",
      "output": "true/false",
      "verwendung": "Vor API-Call zur Validierung"
    },
    "isDateInPast": {
      "zweck": "Prüft ob Datum in Vergangenheit",
      "input": "15.02.2020",
      "output": "true",
      "verwendung": "Verhindert Buchungen in Vergangenheit"
    }
  },
  
  "code_beispiele": {
    "vor_api_call": {
      "beschreibung": "Konvertiere User-Input vor API-Call",
      "code": [
        "const germanDate = document.getElementById('bookingDate').value; // '15.02.2025'",
        "",
        "// Validierung",
        "if (!validateGermanDate(germanDate)) {",
        "    alert('Bitte gültiges Datum eingeben (DD.MM.YYYY)');",
        "    return;",
        "}",
        "",
        "if (isDateInPast(germanDate)) {",
        "    alert('Datum darf nicht in Vergangenheit liegen');",
        "    return;",
        "}",
        "",
        "// Konvertiere zu ISO für API",
        "const isoDate = formatDateISO(germanDate); // '2025-02-15'",
        "",
        "// API-Call",
        "await apiCall('/webhook/booking-ops', {",
        "    booking_data: {",
        "        date: isoDate // ISO-Format!",
        "    }",
        "});"
      ]
    },
    "nach_api_response": {
      "beschreibung": "Konvertiere API-Response für UI-Anzeige",
      "code": [
        "// API Response",
        "const response = {",
        "    confirmation_details: {",
        "        date: '2025-02-15', // ISO-Format von API",
        "        time: '14:30'",
        "    }",
        "};",
        "",
        "// Konvertiere zu deutschem Format",
        "const germanDate = formatDateGerman(response.confirmation_details.date); // '15.02.2025'",
        "",
        "// In UI anzeigen",
        "const message = `Dein Termin: ${germanDate} um ${response.confirmation_details.time}`;",
        "addBotMessage(message);"
      ]
    },
    "in_bot_nachricht": {
      "beschreibung": "Zeige Datum schön formatiert in Bot-Nachrichten",
      "code": [
        "// Option 1: Standard deutsches Format",
        "const germanDate = formatDateGerman('2025-02-15'); // '15.02.2025'",
        "addBotMessage(`Dein Termin am ${germanDate} wurde gebucht!`);",
        "",
        "// Option 2: Ausgeschriebener Monat",
        "const readableDate = formatDateGermanReadable('15.02.2025'); // '15. Februar 2025'",
        "addBotMessage(`Dein Termin am ${readableDate} wurde gebucht!`);"
      ]
    }
  },
  
  "integration_in_frontend": {
    "schritt_1": {
      "titel": "Helper-Funktionen einfügen",
      "wo": "Am Anfang des <script> Bereichs, direkt nach API_CONFIG",
      "datei": "date-format-helpers.js kopieren oder Funktionen direkt einfügen"
    },
    "schritt_2": {
      "titel": "In submitBookingForm() verwenden",
      "änderungen": [
        "User-Input validieren mit validateGermanDate()",
        "Datum mit isDateInPast() prüfen",
        "Vor API-Call mit formatDateISO() konvertieren",
        "API-Response mit formatDateGerman() für UI konvertieren"
      ]
    },
    "schritt_3": {
      "titel": "In Bot-Nachrichten verwenden",
      "änderungen": [
        "Alle Datum-Anzeigen mit formatDateGerman() konvertieren",
        "Optional: formatDateGermanReadable() für schönere Anzeige"
      ]
    },
    "schritt_4": {
      "titel": "Date-Picker konfigurieren",
      "änderungen": [
        "Min-Datum auf heute setzen mit getCurrentDateGerman()",
        "Falls HTML5 date input: mit formatDateISO() für min/max Attribute"
      ]
    }
  },
  
  "häufige_fehler": {
    "fehler_1": {
      "problem": "Datum wird als '2025-02-15' im UI angezeigt",
      "ursache": "Vergessen zu konvertieren",
      "lösung": "formatDateGerman() verwenden"
    },
    "fehler_2": {
      "problem": "API gibt Fehler bei Datum",
      "ursache": "Deutsches Format an API gesendet",
      "lösung": "formatDateISO() vor API-Call verwenden"
    },
    "fehler_3": {
      "problem": "Ungültige Daten werden akzeptiert (z.B. 32.13.2025)",
      "ursache": "Keine Validierung",
      "lösung": "validateGermanDate() vor API-Call verwenden"
    },
    "fehler_4": {
      "problem": "User kann vergangene Daten buchen",
      "ursache": "Keine Vergangenheits-Prüfung",
      "lösung": "isDateInPast() verwenden"
    }
  },
  
  "testing_checklist": [
    {
      "test": "User gibt '15.02.2025' ein",
      "erwartung": "API erhält '2025-02-15'"
    },
    {
      "test": "API antwortet mit '2025-02-15'",
      "erwartung": "UI zeigt '15.02.2025'"
    },
    {
      "test": "User gibt '32.13.2025' ein (ungültig)",
      "erwartung": "Fehlermeldung wird angezeigt"
    },
    {
      "test": "User gibt '15.02.2020' ein (Vergangenheit)",
      "erwartung": "Fehlermeldung: Datum in Vergangenheit"
    },
    {
      "test": "Bot zeigt Bestätigung mit Datum",
      "erwartung": "Datum im Format '15.02.2025' oder '15. Februar 2025'"
    }
  ],
  
  "zusammenfassung": {
    "regel_1": "Immer ISO (YYYY-MM-DD) an API senden",
    "regel_2": "Immer deutsch (DD.MM.YYYY) in UI anzeigen",
    "regel_3": "Vor jedem API-Call validieren",
    "regel_4": "Keine vergangenen Daten erlauben",
    "regel_5": "Helper-Funktionen konsequent verwenden"
  }
}
